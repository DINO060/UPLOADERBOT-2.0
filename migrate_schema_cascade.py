#!/usr/bin/env python3
"""
Migration compl√®te du sch√©ma DB pour corriger les Foreign Keys CASCADE
Corrige d√©finitivement le probl√®me de suppression de canaux
"""

import sqlite3
import os
import shutil
from datetime import datetime
from pathlib import Path

def backup_database(db_path: str) -> str:
    """Cr√©er une sauvegarde avant migration"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_path = f"{db_path}.backup_{timestamp}"
    
    if os.path.exists(db_path):
        shutil.copy2(db_path, backup_path)
        print(f"‚úÖ Sauvegarde cr√©√©e: {backup_path}")
        return backup_path
    else:
        print(f"‚ö†Ô∏è Fichier DB {db_path} introuvable")
        return None

def migrate_database_schema(db_path: str):
    """Migration compl√®te pour corriger les FK CASCADE"""
    print("üîß MIGRATION COMPL√àTE DU SCH√âMA")
    print("=" * 50)
    
    # 1. Sauvegarde
    backup_path = backup_database(db_path)
    
    conn = sqlite3.connect(db_path)
    try:
        # D√©sactiver les FK pendant la migration
        conn.execute("PRAGMA foreign_keys = OFF;")
        conn.execute("BEGIN TRANSACTION;")
        
        print("üìã Recr√©ation de la table POSTS avec FK CASCADE...")
        
        # POSTS : Recr√©ation avec FK CASCADE correcte
        conn.execute("""
            CREATE TABLE posts_new (
                id             INTEGER PRIMARY KEY AUTOINCREMENT,
                channel_id     INTEGER NOT NULL,
                post_type      TEXT NOT NULL,
                content        TEXT NOT NULL,
                caption        TEXT,
                buttons        TEXT,
                reactions      TEXT,
                scheduled_time TIMESTAMP,
                status         TEXT DEFAULT 'pending',
                created_at     TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (channel_id) REFERENCES channels(id) ON DELETE CASCADE
            )
        """)
        
        # Copier les donn√©es valides (avec canaux existants)
        conn.execute("""
            INSERT INTO posts_new
            (id, channel_id, post_type, content, caption, buttons, reactions, scheduled_time, status, created_at)
            SELECT p.id, p.channel_id, 
                   COALESCE(p.post_type, 'text') as post_type,
                   p.content, p.caption, p.buttons, p.reactions, 
                   p.scheduled_time, 
                   COALESCE(p.status, 'pending') as status,
                   p.created_at
            FROM posts p
            JOIN channels c ON c.id = p.channel_id
        """)
        
        # Compter les posts copi√©s
        copied_posts = conn.execute("SELECT COUNT(*) FROM posts_new").fetchone()[0]
        original_posts = conn.execute("SELECT COUNT(*) FROM posts").fetchone()[0]
        
        print(f"   ‚úÖ Posts copi√©s: {copied_posts}/{original_posts}")
        
        # Remplacer la table
        conn.execute("DROP TABLE posts")
        conn.execute("ALTER TABLE posts_new RENAME TO posts")
        
        print("üìã Recr√©ation de la table JOBS avec FK CASCADE...")
        
        # JOBS : Recr√©ation avec FK CASCADE correcte
        conn.execute("""
            CREATE TABLE jobs_new (
                id             INTEGER PRIMARY KEY AUTOINCREMENT,
                channel_id     INTEGER NOT NULL,
                job_id         TEXT UNIQUE,
                status         TEXT DEFAULT 'pending',
                scheduled_time TIMESTAMP,
                created_at     TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (channel_id) REFERENCES channels(id) ON DELETE CASCADE
            )
        """)
        
        # V√©rifier si la table jobs existe
        tables = conn.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='jobs'").fetchone()
        
        if tables:
            # Copier les donn√©es jobs existantes
            conn.execute("""
                INSERT INTO jobs_new (id, channel_id, job_id, status, scheduled_time, created_at)
                SELECT j.id, j.channel_id, j.job_id, j.status, j.scheduled_time, j.created_at
                FROM jobs j
                JOIN channels c ON c.id = j.channel_id
            """)
            
            copied_jobs = conn.execute("SELECT COUNT(*) FROM jobs_new").fetchone()[0]
            original_jobs = conn.execute("SELECT COUNT(*) FROM jobs").fetchone()[0]
            print(f"   ‚úÖ Jobs copi√©s: {copied_jobs}/{original_jobs}")
            
            conn.execute("DROP TABLE jobs")
        else:
            print("   ‚ÑπÔ∏è Table jobs n'existait pas, cr√©ation nouvelle")
        
        conn.execute("ALTER TABLE jobs_new RENAME TO jobs")
        
        # Cr√©er les index utiles
        print("üìä Cr√©ation des index...")
        conn.execute("CREATE INDEX IF NOT EXISTS idx_posts_channel_id ON posts(channel_id)")
        conn.execute("CREATE INDEX IF NOT EXISTS idx_jobs_channel_id ON jobs(channel_id)")
        
        # Valider la transaction
        conn.execute("COMMIT;")
        
        # R√©activer les FK
        conn.execute("PRAGMA foreign_keys = ON;")
        
        print("‚úÖ Migration termin√©e avec succ√®s!")
        
    except Exception as e:
        print(f"‚ùå Erreur pendant la migration: {e}")
        conn.execute("ROLLBACK;")
        
        # Restaurer la sauvegarde
        if backup_path and os.path.exists(backup_path):
            shutil.copy2(backup_path, db_path)
            print(f"üîÑ Base restaur√©e depuis {backup_path}")
        
        raise e
    finally:
        conn.close()

def verify_migration(db_path: str):
    """V√©rifier que la migration a fonctionn√©"""
    print("\nüß™ V√âRIFICATION DE LA MIGRATION")
    print("=" * 40)
    
    conn = sqlite3.connect(db_path)
    try:
        # Activer FK
        conn.execute("PRAGMA foreign_keys = ON;")
        
        # 1. V√©rifier l'activation des FK
        fk_status = conn.execute("PRAGMA foreign_keys;").fetchone()[0]
        print(f"üîê Foreign Keys: {'‚úÖ ACTIV√âES' if fk_status else '‚ùå D√âSACTIV√âES'}")
        
        # 2. V√©rifier les FK CASCADE sur posts
        posts_fks = conn.execute("PRAGMA foreign_key_list(posts);").fetchall()
        print("üìã Foreign Keys table POSTS:")
        for fk in posts_fks:
            on_delete = fk[5] if len(fk) > 5 else "NO ACTION"
            print(f"   - {fk[3]} -> {fk[2]}.{fk[4]} (on_delete: {on_delete})")
        
        # 3. V√©rifier les FK CASCADE sur jobs
        jobs_fks = conn.execute("PRAGMA foreign_key_list(jobs);").fetchall()
        print("üìã Foreign Keys table JOBS:")
        for fk in jobs_fks:
            on_delete = fk[5] if len(fk) > 5 else "NO ACTION"
            print(f"   - {fk[3]} -> {fk[2]}.{fk[4]} (on_delete: {on_delete})")
        
        # 4. Test CASCADE fonctionnel
        print("\nüß™ Test CASCADE:")
        
        # Cr√©er un canal de test
        cursor = conn.execute("""
            INSERT INTO channels(name, username, user_id) 
            VALUES ('Test CASCADE', '@test_cascade', 999999)
        """)
        test_channel_id = cursor.lastrowid
        
        # Cr√©er un post li√©
        conn.execute("""
            INSERT INTO posts(channel_id, post_type, content) 
            VALUES (?, 'text', 'Test post CASCADE')
        """, (test_channel_id,))
        
        # Compter avant suppression
        posts_before = conn.execute("SELECT COUNT(*) FROM posts WHERE channel_id = ?", (test_channel_id,)).fetchone()[0]
        print(f"   Posts avant suppression: {posts_before}")
        
        # Supprimer le canal
        conn.execute("DELETE FROM channels WHERE id = ?", (test_channel_id,))
        
        # Compter apr√®s suppression
        posts_after = conn.execute("SELECT COUNT(*) FROM posts WHERE channel_id = ?", (test_channel_id,)).fetchone()[0]
        print(f"   Posts apr√®s suppression: {posts_after}")
        
        if posts_after == 0:
            print("   ‚úÖ CASCADE fonctionne correctement!")
        else:
            print("   ‚ùå CASCADE ne fonctionne pas!")
        
        conn.commit()
        
    finally:
        conn.close()

def fix_db_paths():
    """Corriger les chemins de DB inconsistants dans le code"""
    print("\nüîß CORRECTION DES CHEMINS DB")
    print("=" * 35)
    
    # Cr√©er le dossier data s'il n'existe pas
    data_dir = Path("data")
    data_dir.mkdir(exist_ok=True)
    
    # S'assurer que bot.db est dans data/
    main_db = "bot.db" 
    data_db = "data/bot.db"
    
    if os.path.exists(main_db) and not os.path.exists(data_db):
        shutil.move(main_db, data_db)
        print(f"‚úÖ D√©plac√© {main_db} vers {data_db}")
    elif os.path.exists(data_db):
        print(f"‚úÖ {data_db} d√©j√† en place")
    else:
        print(f"‚ÑπÔ∏è Aucune DB trouv√©e, sera cr√©√©e au besoin")

def main():
    """Fonction principale de migration"""
    print("üöÄ MIGRATION COMPL√àTE - CORRECTION SCH√âMA CASCADE")
    print("=" * 60)
    
    # 1. Corriger les chemins
    fix_db_paths()
    
    # 2. D√©terminer le bon chemin DB
    possible_paths = ["data/bot.db", "bot.db"]
    db_path = None
    
    for path in possible_paths:
        if os.path.exists(path):
            db_path = path
            print(f"üìÅ Base trouv√©e: {path}")
            break
    
    if not db_path:
        print("‚ùå Aucune base de donn√©es trouv√©e!")
        return
    
    # 3. Migration du sch√©ma
    try:
        migrate_database_schema(db_path)
        verify_migration(db_path)
        
        print(f"\nüéâ MIGRATION R√âUSSIE!")
        print(f"\nüí° La suppression de canaux fonctionne maintenant via:")
        print(f"   DELETE FROM channels WHERE id = ? --> CASCADE automatique")
        
    except Exception as e:
        print(f"\n‚ùå √âCHEC DE LA MIGRATION: {e}")

if __name__ == "__main__":
    main()