#!/usr/bin/env python3
"""
Script de diagnostic pour le bot Telegram
Ce script v√©rifie l'√©tat du bot et identifie les probl√®mes potentiels
"""

import sqlite3
import os
import sys
from pathlib import Path

# Ajouter le r√©pertoire parent au path pour les imports
sys.path.append(str(Path(__file__).parent))

try:
    from config import settings
    from database.channel_repo import list_user_channels, init_db
except ImportError as e:
    print(f"Erreur d'import: {e}")
    sys.exit(1)

def check_database():
    """V√©rifie l'√©tat de la base de donn√©es"""
    print("üîç V√©rification de la base de donn√©es...")
    
    db_path = settings.db_config.get("path", "bot.db")
    
    if not os.path.exists(db_path):
        print(f"‚ùå Fichier de base de donn√©es introuvable: {db_path}")
        return False
    
    print(f"‚úÖ Fichier de base de donn√©es trouv√©: {db_path}")
    
    try:
        with sqlite3.connect(db_path) as conn:
            # V√©rifier les tables
            tables = conn.execute("SELECT name FROM sqlite_master WHERE type='table'").fetchall()
            table_names = [table[0] for table in tables]
            
            required_tables = ['channels', 'channel_members', 'files', 'posts', 'users', 'user_settings']
            
            for table in required_tables:
                if table in table_names:
                    count = conn.execute(f"SELECT COUNT(*) FROM {table}").fetchone()[0]
                    print(f"‚úÖ Table {table}: {count} enregistrements")
                else:
                    print(f"‚ùå Table {table} manquante")
            
            # V√©rifier les permissions
            if os.access(db_path, os.W_OK):
                print("‚úÖ Permissions d'√©criture sur la base de donn√©es")
            else:
                print("‚ùå Pas de permissions d'√©criture sur la base de donn√©es")
                
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification de la base de donn√©es: {e}")
        return False
    
    return True

def check_channels():
    """V√©rifie les canaux configur√©s"""
    print("\nüîç V√©rification des canaux...")
    
    try:
        # Tester avec un utilisateur d'exemple
        channels = list(list_user_channels(1))
        print(f"‚úÖ {len(channels)} canaux trouv√©s pour l'utilisateur 1")
        
        for i, channel in enumerate(channels, 1):
            print(f"  {i}. {channel.get('title', 'N/A')} (@{channel.get('username', 'N/A')})")
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration des canaux: {e}")
        return False
    
    return True

def check_environment():
    """V√©rifie l'environnement d'ex√©cution"""
    print("\nüîç V√©rification de l'environnement...")
    
    # V√©rifier les variables d'environnement
    required_vars = ['API_ID', 'API_HASH', 'BOT_TOKEN']
    
    for var in required_vars:
        value = os.getenv(var)
        if value:
            print(f"‚úÖ {var}: {'*' * len(value)} (configur√©)")
        else:
            print(f"‚ùå {var}: non configur√©")
    
    # V√©rifier les dossiers
    folders = ['downloads', 'temp', 'thumbnails', 'logs']
    
    for folder in folders:
        folder_path = os.path.join(os.getcwd(), folder)
        if os.path.exists(folder_path):
            print(f"‚úÖ Dossier {folder}: existe")
        else:
            print(f"‚ùå Dossier {folder}: manquant")
    
    # V√©rifier les fichiers de session
    session_files = ['pyro_user.session', 'telethon_user.session', 'uploader_session.session']
    
    for session_file in session_files:
        if os.path.exists(session_file):
            print(f"‚úÖ Session {session_file}: existe")
        else:
            print(f"‚ö†Ô∏è Session {session_file}: manquant (peut √™tre normal)")

def check_config():
    """V√©rifie la configuration"""
    print("\nüîç V√©rification de la configuration...")
    
    try:
        print(f"‚úÖ API_ID: {'*' * len(settings.api_id) if settings.api_id else 'Non configur√©'}")
        print(f"‚úÖ API_HASH: {'*' * len(settings.api_hash) if settings.api_hash else 'Non configur√©'}")
        print(f"‚úÖ BOT_TOKEN: {'*' * len(settings.bot_token) if settings.bot_token else 'Non configur√©'}")
        print(f"‚úÖ DB_PATH: {settings.db_path}")
        print(f"‚úÖ DOWNLOAD_FOLDER: {settings.download_folder}")
        
        if settings.admin_ids:
            print(f"‚úÖ ADMIN_IDS: {settings.admin_ids}")
        else:
            print("‚ö†Ô∏è ADMIN_IDS: non configur√©")
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification de la configuration: {e}")

def main():
    """Fonction principale de diagnostic"""
    print("üöÄ Diagnostic du bot Telegram")
    print("=" * 50)
    
    # V√©rifier l'environnement
    check_environment()
    
    # V√©rifier la configuration
    check_config()
    
    # V√©rifier la base de donn√©es
    db_ok = check_database()
    
    # V√©rifier les canaux
    if db_ok:
        check_channels()
    
    print("\n" + "=" * 50)
    print("üìã R√©sum√© du diagnostic:")
    
    if db_ok:
        print("‚úÖ La base de donn√©es semble fonctionnelle")
    else:
        print("‚ùå Probl√®mes d√©tect√©s avec la base de donn√©es")
        print("üí° Solution: Ex√©cutez le script init_database.py")
    
    print("\nüîß Actions recommand√©es:")
    print("1. Si des tables manquent: python init_database.py")
    print("2. Si des variables d'environnement manquent: configurez votre fichier .env")
    print("3. Si des dossiers manquent: cr√©ez-les manuellement")
    print("4. Red√©marrez le bot apr√®s les corrections")

if __name__ == "__main__":
    main()
